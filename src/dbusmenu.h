/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DBUSMENU_H__
#define __DBUSMENU_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.canonical.dbusmenu */

#define TYPE_DBUSMENU (dbusmenu_get_type ())
#define DBUSMENU(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUSMENU, Dbusmenu))
#define IS_DBUSMENU(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUSMENU))
#define DBUSMENU_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DBUSMENU, DbusmenuIface))

struct _Dbusmenu;
typedef struct _Dbusmenu Dbusmenu;
typedef struct _DbusmenuIface DbusmenuIface;

struct _DbusmenuIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_about_to_show) (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    gint arg_id);

  gboolean (*handle_event) (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    gint arg_id,
    const gchar *arg_eventId,
    GVariant *arg_data,
    guint arg_timestamp);

  gboolean (*handle_get_group_properties) (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_ids,
    const gchar *const *arg_propertyNames);

  gboolean (*handle_get_layout) (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    gint arg_parentId,
    gint arg_recursionDepth,
    const gchar *const *arg_propertyNames);

  gboolean (*handle_get_property) (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    gint arg_id,
    const gchar *arg_property);

  const gchar * (*get_status) (Dbusmenu *object);

  guint  (*get_version) (Dbusmenu *object);

  void (*item_activation_requested) (
    Dbusmenu *object,
    gint arg_id,
    guint arg_timeStamp);

  void (*items_properties_updated) (
    Dbusmenu *object,
    GVariant *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  void (*layout_updated) (
    Dbusmenu *object,
    guint arg_revision,
    gint arg_parentId);

};

GType dbusmenu_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbusmenu_interface_info (void);
guint dbusmenu_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbusmenu_complete_event (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation);

void dbusmenu_complete_get_property (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg2);

void dbusmenu_complete_get_layout (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    guint unnamed_arg3,
    GVariant *item);

void dbusmenu_complete_get_group_properties (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg2);

void dbusmenu_complete_about_to_show (
    Dbusmenu *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg1);



/* D-Bus signal emissions functions: */
void dbusmenu_emit_items_properties_updated (
    Dbusmenu *object,
    GVariant *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

void dbusmenu_emit_layout_updated (
    Dbusmenu *object,
    guint arg_revision,
    gint arg_parentId);

void dbusmenu_emit_item_activation_requested (
    Dbusmenu *object,
    gint arg_id,
    guint arg_timeStamp);



/* D-Bus method calls: */
void dbusmenu_call_event (
    Dbusmenu *proxy,
    gint arg_id,
    const gchar *arg_eventId,
    GVariant *arg_data,
    guint arg_timestamp,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbusmenu_call_event_finish (
    Dbusmenu *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbusmenu_call_event_sync (
    Dbusmenu *proxy,
    gint arg_id,
    const gchar *arg_eventId,
    GVariant *arg_data,
    guint arg_timestamp,
    GCancellable *cancellable,
    GError **error);

void dbusmenu_call_get_property (
    Dbusmenu *proxy,
    gint arg_id,
    const gchar *arg_property,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbusmenu_call_get_property_finish (
    Dbusmenu *proxy,
    GVariant **out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean dbusmenu_call_get_property_sync (
    Dbusmenu *proxy,
    gint arg_id,
    const gchar *arg_property,
    GVariant **out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void dbusmenu_call_get_layout (
    Dbusmenu *proxy,
    gint arg_parentId,
    gint arg_recursionDepth,
    const gchar *const *arg_propertyNames,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbusmenu_call_get_layout_finish (
    Dbusmenu *proxy,
    guint *out_unnamed_arg3,
    GVariant **out_item,
    GAsyncResult *res,
    GError **error);

gboolean dbusmenu_call_get_layout_sync (
    Dbusmenu *proxy,
    gint arg_parentId,
    gint arg_recursionDepth,
    const gchar *const *arg_propertyNames,
    guint *out_unnamed_arg3,
    GVariant **out_item,
    GCancellable *cancellable,
    GError **error);

void dbusmenu_call_get_group_properties (
    Dbusmenu *proxy,
    GVariant *arg_ids,
    const gchar *const *arg_propertyNames,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbusmenu_call_get_group_properties_finish (
    Dbusmenu *proxy,
    GVariant **out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean dbusmenu_call_get_group_properties_sync (
    Dbusmenu *proxy,
    GVariant *arg_ids,
    const gchar *const *arg_propertyNames,
    GVariant **out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void dbusmenu_call_about_to_show (
    Dbusmenu *proxy,
    gint arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbusmenu_call_about_to_show_finish (
    Dbusmenu *proxy,
    gboolean *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean dbusmenu_call_about_to_show_sync (
    Dbusmenu *proxy,
    gint arg_id,
    gboolean *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint dbusmenu_get_version (Dbusmenu *object);
void dbusmenu_set_version (Dbusmenu *object, guint value);

const gchar *dbusmenu_get_status (Dbusmenu *object);
gchar *dbusmenu_dup_status (Dbusmenu *object);
void dbusmenu_set_status (Dbusmenu *object, const gchar *value);


/* ---- */

#define TYPE_DBUSMENU_PROXY (dbusmenu_proxy_get_type ())
#define DBUSMENU_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUSMENU_PROXY, DbusmenuProxy))
#define DBUSMENU_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUSMENU_PROXY, DbusmenuProxyClass))
#define DBUSMENU_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUSMENU_PROXY, DbusmenuProxyClass))
#define IS_DBUSMENU_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUSMENU_PROXY))
#define IS_DBUSMENU_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUSMENU_PROXY))

typedef struct _DbusmenuProxy DbusmenuProxy;
typedef struct _DbusmenuProxyClass DbusmenuProxyClass;
typedef struct _DbusmenuProxyPrivate DbusmenuProxyPrivate;

struct _DbusmenuProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusmenuProxyPrivate *priv;
};

struct _DbusmenuProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbusmenu_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusmenuProxy, g_object_unref)
#endif

void dbusmenu_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Dbusmenu *dbusmenu_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Dbusmenu *dbusmenu_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbusmenu_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Dbusmenu *dbusmenu_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Dbusmenu *dbusmenu_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DBUSMENU_SKELETON (dbusmenu_skeleton_get_type ())
#define DBUSMENU_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUSMENU_SKELETON, DbusmenuSkeleton))
#define DBUSMENU_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUSMENU_SKELETON, DbusmenuSkeletonClass))
#define DBUSMENU_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUSMENU_SKELETON, DbusmenuSkeletonClass))
#define IS_DBUSMENU_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUSMENU_SKELETON))
#define IS_DBUSMENU_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUSMENU_SKELETON))

typedef struct _DbusmenuSkeleton DbusmenuSkeleton;
typedef struct _DbusmenuSkeletonClass DbusmenuSkeletonClass;
typedef struct _DbusmenuSkeletonPrivate DbusmenuSkeletonPrivate;

struct _DbusmenuSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusmenuSkeletonPrivate *priv;
};

struct _DbusmenuSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbusmenu_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusmenuSkeleton, g_object_unref)
#endif

Dbusmenu *dbusmenu_skeleton_new (void);


G_END_DECLS

#endif /* __DBUSMENU_H__ */
