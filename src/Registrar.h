/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __REGISTRAR_H__
#define __REGISTRAR_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.canonical.AppMenu.Registrar */

#define TYPE_REGISTRAR (registrar_get_type ())
#define REGISTRAR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_REGISTRAR, Registrar))
#define IS_REGISTRAR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_REGISTRAR))
#define REGISTRAR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_REGISTRAR, RegistrarIface))

struct _Registrar;
typedef struct _Registrar Registrar;
typedef struct _RegistrarIface RegistrarIface;

struct _RegistrarIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_menu_for_window) (
    Registrar *object,
    GDBusMethodInvocation *invocation,
    guint arg_windowId);

  gboolean (*handle_get_menus) (
    Registrar *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_window) (
    Registrar *object,
    GDBusMethodInvocation *invocation,
    guint arg_windowId,
    const gchar *arg_menuObjectPath);

  gboolean (*handle_unregister_window) (
    Registrar *object,
    GDBusMethodInvocation *invocation,
    guint arg_windowId);

  void (*window_registered) (
    Registrar *object,
    guint arg_windowId,
    const gchar *arg_service,
    const gchar *arg_menuObjectPath);

  void (*window_unregistered) (
    Registrar *object,
    guint arg_windowId);

};

GType registrar_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *registrar_interface_info (void);
guint registrar_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void registrar_complete_register_window (
    Registrar *object,
    GDBusMethodInvocation *invocation);

void registrar_complete_unregister_window (
    Registrar *object,
    GDBusMethodInvocation *invocation);

void registrar_complete_get_menu_for_window (
    Registrar *object,
    GDBusMethodInvocation *invocation,
    const gchar *service,
    const gchar *menuObjectPath);

void registrar_complete_get_menus (
    Registrar *object,
    GDBusMethodInvocation *invocation,
    GVariant *menus);



/* D-Bus signal emissions functions: */
void registrar_emit_window_registered (
    Registrar *object,
    guint arg_windowId,
    const gchar *arg_service,
    const gchar *arg_menuObjectPath);

void registrar_emit_window_unregistered (
    Registrar *object,
    guint arg_windowId);



/* D-Bus method calls: */
void registrar_call_register_window (
    Registrar *proxy,
    guint arg_windowId,
    const gchar *arg_menuObjectPath,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean registrar_call_register_window_finish (
    Registrar *proxy,
    GAsyncResult *res,
    GError **error);

gboolean registrar_call_register_window_sync (
    Registrar *proxy,
    guint arg_windowId,
    const gchar *arg_menuObjectPath,
    GCancellable *cancellable,
    GError **error);

void registrar_call_unregister_window (
    Registrar *proxy,
    guint arg_windowId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean registrar_call_unregister_window_finish (
    Registrar *proxy,
    GAsyncResult *res,
    GError **error);

gboolean registrar_call_unregister_window_sync (
    Registrar *proxy,
    guint arg_windowId,
    GCancellable *cancellable,
    GError **error);

void registrar_call_get_menu_for_window (
    Registrar *proxy,
    guint arg_windowId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean registrar_call_get_menu_for_window_finish (
    Registrar *proxy,
    gchar **out_service,
    gchar **out_menuObjectPath,
    GAsyncResult *res,
    GError **error);

gboolean registrar_call_get_menu_for_window_sync (
    Registrar *proxy,
    guint arg_windowId,
    gchar **out_service,
    gchar **out_menuObjectPath,
    GCancellable *cancellable,
    GError **error);

void registrar_call_get_menus (
    Registrar *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean registrar_call_get_menus_finish (
    Registrar *proxy,
    GVariant **out_menus,
    GAsyncResult *res,
    GError **error);

gboolean registrar_call_get_menus_sync (
    Registrar *proxy,
    GVariant **out_menus,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_REGISTRAR_PROXY (registrar_proxy_get_type ())
#define REGISTRAR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_REGISTRAR_PROXY, RegistrarProxy))
#define REGISTRAR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_REGISTRAR_PROXY, RegistrarProxyClass))
#define REGISTRAR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_REGISTRAR_PROXY, RegistrarProxyClass))
#define IS_REGISTRAR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_REGISTRAR_PROXY))
#define IS_REGISTRAR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_REGISTRAR_PROXY))

typedef struct _RegistrarProxy RegistrarProxy;
typedef struct _RegistrarProxyClass RegistrarProxyClass;
typedef struct _RegistrarProxyPrivate RegistrarProxyPrivate;

struct _RegistrarProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RegistrarProxyPrivate *priv;
};

struct _RegistrarProxyClass
{
  GDBusProxyClass parent_class;
};

GType registrar_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RegistrarProxy, g_object_unref)
#endif

void registrar_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Registrar *registrar_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Registrar *registrar_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void registrar_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Registrar *registrar_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Registrar *registrar_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_REGISTRAR_SKELETON (registrar_skeleton_get_type ())
#define REGISTRAR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_REGISTRAR_SKELETON, RegistrarSkeleton))
#define REGISTRAR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_REGISTRAR_SKELETON, RegistrarSkeletonClass))
#define REGISTRAR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_REGISTRAR_SKELETON, RegistrarSkeletonClass))
#define IS_REGISTRAR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_REGISTRAR_SKELETON))
#define IS_REGISTRAR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_REGISTRAR_SKELETON))

typedef struct _RegistrarSkeleton RegistrarSkeleton;
typedef struct _RegistrarSkeletonClass RegistrarSkeletonClass;
typedef struct _RegistrarSkeletonPrivate RegistrarSkeletonPrivate;

struct _RegistrarSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RegistrarSkeletonPrivate *priv;
};

struct _RegistrarSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType registrar_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (RegistrarSkeleton, g_object_unref)
#endif

Registrar *registrar_skeleton_new (void);


G_END_DECLS

#endif /* __REGISTRAR_H__ */
